{
  "normlatemplate": {
    "prefix": "normaltemplate",
    "body": [
      "import java.io.*;",
      "import java.util.*;",
      "",
      "class FastIO extends PrintWriter {",
      "    private InputStream stream;",
      "    private byte[] buf = new byte[1 << 16];",
      "    private int curChar, numChars;",
      "",
      "    public FastIO() { this(System.in, System.out); }",
      "    public FastIO(InputStream i, OutputStream o) { super(o); stream = i; }",
      "    public FastIO(String i, String o) throws IOException { super(new FileWriter(o)); stream = new FileInputStream(i); }",
      "",
      "    private int nextByte() {",
      "        if (numChars == -1) throw new InputMismatchException();",
      "        if (curChar >= numChars) {",
      "            curChar = 0;",
      "            try { numChars = stream.read(buf); }",
      "            catch (IOException e) { throw new InputMismatchException(); }",
      "        }",
      "        return buf[curChar++];",
      "    }",
      "",
      "    public String nextLine() {",
      "        int c;",
      "        do { c = nextByte(); } while (c <= '\\n');",
      "        StringBuilder res = new StringBuilder();",
      "        do { res.appendCodePoint(c); c = nextByte(); } while (c > '\\n');",
      "        return res.toString();",
      "    }",
      "",
      "    public String next() {",
      "        int c;",
      "        do { c = nextByte(); } while (c <= ' ');",
      "        StringBuilder res = new StringBuilder();",
      "        do { res.appendCodePoint(c); c = nextByte(); } while (c > ' ');",
      "        return res.toString();",
      "    }",
      "",
      "    public int nextInt() {",
      "        int c;",
      "        do { c = nextByte(); } while (c <= ' ');",
      "        int sgn = 1;",
      "        if (c == '-') { sgn = -1; c = nextByte(); }",
      "        int res = 0;",
      "        do {",
      "            if (c < '0' || c > '9') throw new InputMismatchException();",
      "            res = 10 * res + c - '0';",
      "            c = nextByte();",
      "        } while (c > ' ');",
      "        return res * sgn;",
      "    }",
      "",
      "    public long nextLong() {",
      "        int c;",
      "        do { c = nextByte(); } while (c <= ' ');",
      "        long sgn = 1;",
      "        if (c == '-') { sgn = -1; c = nextByte(); }",
      "        long res = 0;",
      "        do {",
      "            if (c < '0' || c > '9') throw new InputMismatchException();",
      "            res = 10 * res + c - '0';",
      "            c = nextByte();",
      "        } while (c > ' ');",
      "        return res * sgn;",
      "    }",
      "",
      "    public double nextDouble() {",
      "        return Double.parseDouble(next());",
      "    }",
      "}",
      "",
      "public class Main {",
      "    static FastIO sc = new FastIO();",
      "",
      "    public static void main(String args[]) {",
      "        $0",
      "",
      "        sc.flush();",
      "    }",
      "}"
    ],
    "description": ""
  },
  "radixsort": {
    "prefix": "radixsort",
    "body": [
      "static int[] radixSort(int[] f) {",
      "    int[] to = new int[f.length];",
      "",
      "    {",
      "        int[] b = new int[65537];",
      "        for (int i = 0; i < f.length; i++) b[1 + (f[i] & 0xffff)]++;",
      "        for (int i = 1; i <= 65536; i++) b[i] += b[i - 1];",
      "        for (int i = 0; i < f.length; i++) to[b[f[i] & 0xffff]++] = f[i];",
      "        int[] d = f; f = to; to = d;",
      "    }",
      "",
      "    {",
      "        int[] b = new int[65537];",
      "        for (int i = 0; i < f.length; i++) b[1 + (f[i] >>> 16)]++;",
      "        for (int i = 1; i <= 65536; i++) b[i] += b[i - 1];",
      "        for (int i = 0; i < f.length; i++) to[b[f[i] >>> 16]++] = f[i];",
      "        int[] d = f; f = to; to = d;",
      "    }",
      "",
      "    return f;",
      "}"
    ],
    "description": ""
  },
  "rufflesort": {
    "prefix": "rufflesort",
    "body": [
      "static void ruffleSort(int[] a) {",
      "    int n = a.length;",
      "    Random random = new Random();",
      "    for (int i = 0; i < n; i++) {",
      "        int oi = random.nextInt(n);",
      "        int temp = a[oi];",
      "        a[oi] = a[i];",
      "        a[i] = temp;",
      "    }",
      "    Arrays.sort(a);",
      "}"
    ],
    "description": ""
  },
  "upperbound": {
    "prefix": "upperbound",
    "body": [
      "static int upper_bound(int arr[], int N, int X) {",
      "    int mid;",
      "    int low = 0, high = N;",
      "    while (low < high) {",
      "        mid = low + (high - low) / 2;",
      "        if (X >= arr[mid]) {",
      "            low = mid + 1;",
      "        } else {",
      "            high = mid;",
      "        }",
      "    }",
      "    if (low < N && arr[low] <= X) {",
      "        low++;",
      "    }",
      "    return low;",
      "}"
    ],
    "description": ""
  },
  "mergesort": {
    "prefix": "mergesort",
    "body": [
      "public static void sort(int[] arr) {",
      "    if (arr == null) { return; }",
      "    int n = arr.length;",
      "    if (n < 2) { return; }",
      "    int mid = n / 2;",
      "    int[] left = new int[mid];",
      "    int[] right = new int[n - mid];",
      "    System.arraycopy(arr, 0, left, 0, mid);",
      "    System.arraycopy(arr, mid, right, 0, n - mid);",
      "    sort(left);",
      "    sort(right);",
      "    merge(arr, left, right);",
      "}",
      "",
      "private static void merge(int[] arr, int[] left, int[] right) {",
      "    int i = 0, j = 0, k = 0;",
      "    int leftLength = left.length;",
      "    int rightLength = right.length;",
      "    while (i < leftLength && j < rightLength) {",
      "        if (left[i] <= right[j]) {",
      "            arr[k++] = left[i++];",
      "        } else {",
      "            arr[k++] = right[j++];",
      "        }",
      "    }",
      "    while (i < leftLength) { arr[k++] = left[i++]; }",
      "    while (j < rightLength) { arr[k++] = right[j++]; }",
      "}"
    ],
    "description": ""
  }
}

  "multiset": {
    "prefix": "multiset",
    "body": [
      "// Use TreeMap directly to avoid TLE.",
      "class Multiset {",
      "    private TreeMap<Integer, Integer> multiset;",
      "",
      "    public Multiset() {",
      "        multiset = new TreeMap<>();",
      "    }",
      "",
      "    public void add(int element) {",
      "        multiset.put(element, multiset.getOrDefault(element, 0) + 1);",
      "    }",
      "",
      "    public void remove(int element) {",
      "        if (multiset.containsKey(element)) {",
      "            int count = multiset.get(element);",
      "            if (count == 1) {",
      "                multiset.remove(element);",
      "            } else {",
      "                multiset.put(element, count - 1);",
      "            }",
      "        }",
      "    }",
      "",
      "    public int lower(int element) {",
      "        Map.Entry<Integer, Integer> lowerEntry = multiset.lowerEntry(element);",
      "        return lowerEntry != null ? lowerEntry.getKey() : -1;",
      "    }",
      "",
      "    public int higher(int element) {",
      "        Map.Entry<Integer, Integer> higherEntry = multiset.higherEntry(element);",
      "        return higherEntry != null ? higherEntry.getKey() : -1;",
      "    }",
      "",
      "    public int floor(int element) {",
      "        Map.Entry<Integer, Integer> lowerEntry = multiset.floorEntry(element);",
      "        return lowerEntry != null ? lowerEntry.getKey() : -1;",
      "    }",
      "",
      "    public int ceil(int element) {",
      "        Map.Entry<Integer, Integer> higherEntry = multiset.ceilingEntry(element);",
      "        return higherEntry != null ? higherEntry.getKey() : -1;",
      "    }",
      "",
      "    public int size() {",
      "        int length = 0;",
      "        for (int count : multiset.values()) {",
      "            length += count;",
      "        }",
      "        return length;",
      "    }",
      "}"
    ],
    "description": ""
  },
  "lowerbound": {
    "prefix": "lowerbound",
    "body": [
      "int lower_bound(int arr[], int N, int X) {",
      "    int mid, low = 0, high = N;",
      "    while (low < high) {",
      "        mid = low + (high - low) / 2;",
      "        if (X <= arr[mid]) {",
      "            high = mid;",
      "        } else {",
      "            low = mid + 1;",
      "        }",
      "    }",
      "    if (low < N && arr[low] < X) {",
      "        low++;",
      "    }",
      "    return low;",
      "}"
    ],
    "description": ""
  },
  "IO": {
    "prefix": "fastio",
    "body": [
      "class FastIO extends PrintWriter {",
      "    private InputStream stream;",
      "    private byte[] buf = new byte[1 << 16];",
      "    private int curChar, numChars;",
      "",
      "    public FastIO() { this(System.in, System.out); }",
      "    public FastIO(InputStream i, OutputStream o) { super(o); stream = i; }",
      "    public FastIO(String i, String o) throws IOException {",
      "        super(new FileWriter(o));",
      "        stream = new FileInputStream(i);",
      "    }",
      "",
      "    private int nextByte() {",
      "        if (numChars == -1) throw new InputMismatchException();",
      "        if (curChar >= numChars) {",
      "            curChar = 0;",
      "            try { numChars = stream.read(buf); }",
      "            catch (IOException e) { throw new InputMismatchException(); }",
      "        }",
      "        return buf[curChar++];",
      "    }",
      "",
      "    public String nextLine() {",
      "        int c;",
      "        do { c = nextByte(); } while (c <= '\\n');",
      "        StringBuilder res = new StringBuilder();",
      "        do {",
      "            res.appendCodePoint(c);",
      "            c = nextByte();",
      "        } while (c > '\\n');",
      "        return res.toString();",
      "    }",
      "",
      "    public String next() {",
      "        int c;",
      "        do { c = nextByte(); } while (c <= ' ');",
      "        StringBuilder res = new StringBuilder();",
      "        do {",
      "            res.appendCodePoint(c);",
      "            c = nextByte();",
      "        } while (c > ' ');",
      "        return res.toString();",
      "    }",
      "",
      "    public int nextInt() {",
      "        int c;",
      "        do { c = nextByte(); } while (c <= ' ');",
      "        int sgn = 1;",
      "        if (c == '-') { sgn = -1; c = nextByte(); }",
      "        int res = 0;",
      "        do {",
      "            if (c < '0' || c > '9') throw new InputMismatchException();",
      "            res = 10 * res + c - '0';",
      "            c = nextByte();",
      "        } while (c > ' ');",
      "        return res * sgn;",
      "    }",
      "",
      "    public long nextLong() {",
      "        int c;",
      "        do { c = nextByte(); } while (c <= ' ');",
      "        long sgn = 1;",
      "        if (c == '-') { sgn = -1; c = nextByte(); }",
      "        long res = 0;",
      "        do {",
      "            if (c < '0' || c > '9') throw new InputMismatchException();",
      "            res = 10 * res + c - '0';",
      "            c = nextByte();",
      "        } while (c > ' ');",
      "        return res * sgn;",
      "    }",
      "",
      "    public double nextDouble() {",
      "        return Double.parseDouble(next());",
      "    }",
      "}"
    ],
    "description": ""
  }
}
